<subto>
<subto>                 ::= 'subto name_seq:' <constraint_>';\n' |
                            'subto name_seq:' <constraint_>';\n'<subto>
<constraint_%(at)s>     ::= 'forall <%(v)s> in '<sexpr_%(at)s_%(t)s>':\n%(tab)s'<constraint_%(at)s%(t)s>        # (= ({"at": at, "v": ",".join("ijk"[a:a+ia]), "t": t, "tab": "\\t"*len(at)} for a in range(4) for at in sprod("NS", a) for ia in range(1, 4-a) for t in sprod("NS", ia) if any(at.startswith(tp) and _["value_types"] == t for _ in sets.values() for tp in spermut(_["arg_types"])) and any(at in tp for tp in spermut("".join(_["value_types"] for _ in sets.values())))) =)
<constraint_%(at)s>     ::= <sum_%(at)s> <cmp> <constraint_rhs_%(at)s>                                          # (= ({"at": at} for a in range(4) for at in sprod("NS", a) if any(at.startswith(vt) and 1 <= _["value_arity"] < 4-a for _ in sets.values() for vt in spermut(_["arg_types"])) and any(at in tp for tp in spermut("".join(_["value_types"] for _ in sets.values())))) =)
<constraint_%(at)s>     ::= <constraint_lhs_%(at)s> <cmp> <constraint_rhs_%(at)s>                               # (= ({"at": at} for a in range(4) for at in sprod("NS", a) if any(at.startswith(vt) for _ in vardefs.values() for vt in spermut(_["arg_types"])) and any(at in tp for tp in spermut("".join(_["value_types"] for _ in sets.values())))) =)
<sum_%(at)s>            ::= 'sum <%(v)s> in '<sexpr_%(at)s_%(t)s>':' <constant_or_param_%(at)s%(t)s> '*' <variable_%(at)s%(t)s> # (= ({"at": at, "v": ",".join("ijk"[a:a+ia]), "t": t} for a in range(4) for at in sprod("NS", a) for ia in range(1, 4-a) for t in sprod("NS", ia) if any(at.startswith(tp) and _["value_types"] == t for _ in sets.values() for tp in spermut(_["arg_types"])) and any((at+t).startswith(tp) for _ in vardefs.values() for tp in spermut(_["arg_types"])) and any(at in tp for tp in spermut("".join(_["value_types"] for _ in sets.values())))) =)
<constraint_lhs_%(at)s> ::= <constant_or_param_%(at)s> '*' <variable_%(at)s>                                    # (= ({"at": at} for a in range(4) for at in sprod("NS", a) if any(at.startswith(tp) for _ in vardefs.values() for tp in spermut(_["arg_types"])) and any(at in tp for tp in spermut("".join(_["value_types"] for _ in sets.values())))) =)
<constraint_lhs_%(at)s> ::= <constant_or_param_%(at)s> '*' <variable_%(at)s> '+' <constraint_lhs_%(at)s>        # (= ({"at": at} for a in range(4) for at in sprod("NS", a) if any(at.startswith(tp) for _ in vardefs.values() for tp in spermut(_["arg_types"])) and any(at in tp for tp in spermut("".join(_["value_types"] for _ in sets.values())))) =)
<constraint_rhs_%(at)s> ::= <constant_or_param_%(at)s> | 0                                                      # (= ({"at": at, "v": ",".join("ijk"[:a])} for a in range(4) for at in sprod("NS", a) if any(at in tp for tp in spermut("".join(_["value_types"] for _ in sets.values())))) =)
<constant_or_param_%(at)s>::= <constant>                                                                        # (= ({"at": at, "v": ",".join("ijk"[:a])} for a in range(4) for at in sprod("NS", a) if any(at in tp for tp in spermut("".join(_["value_types"] for _ in sets.values())))) =)
<constant_or_param_%(at)s>::= <param_%(at)s>                                                                    # (= ({"at": at} for a in range(4) for at in sprod("NS", a) if any(at.startswith(tp) for _ in params.values() for tp in spermut(_["arg_types"])) and any(at in tp for tp in spermut("".join(_["value_types"] for _ in sets.values())))) =)
<constant_or_param_%(at)s>::= '%(v)s'                                                                           # (= ({"at": at, "v": "ijk"[v]} for a in range(1, 4) for at in sprod("NS", a) for v in range(a) if at[v] == 'N' and any(at in tp for tp in spermut("".join(_["value_types"] for _ in sets.values())))) =)
<sexpr_%(at)s_%(t)s>    ::= <set_%(at)s_%(t)s>                                                                  # (= ({"at": at, "t": t} for a in range(4) for at in sprod("NS", a) for ia in range(1, 4-a) for t in sprod("NS", ia) if any(at.startswith(tp) and _["value_types"] == t for _ in sets.values() for tp in spermut(_["arg_types"])) and any(at in tp for tp in spermut("".join(_["value_types"] for _ in sets.values())))) =)
<set_%(at)s_%(t)s>      ::= '%(s)s%(i)s'                                                                        # (= ({"at": at, "t": t, "s": s, "i": "[%s]" % ",".join(i) if i != "" else ""} for a in range(0, 4) for at in sprod("NS", a) for ia in range(1, 4-a) for t in sprod("NS", ia) for s, _ in sets.items() for tp, i in zip(spermut(at, _["arity"]), spermut("ijk"[:a], _["arity"])) if _["arg_types"] == tp and _["value_types"] == t and any(at in tp for tp in spermut("".join(_["value_types"] for _ in sets.values())))) =)
<variable_%(at)s>       ::= '%(v)s%(i)s'                                                                        # (= ({"at": at, "v": v, "i": "[%s]" % ",".join(i) if i != "" else ""} for a in range(4) for at in sprod("NS", a) for v, _ in vardefs.items() for tp, i in zip(spermut(at, _["arity"]), spermut("ijk"[:a], _["arity"])) if _["arg_types"] == tp and any(at in tp for tp in spermut("".join(_["value_types"] for _ in sets.values())))) =)
<param_%(at)s>          ::= '%(p)s%(i)s'                                                                        # (= ({"at": at, "p": p, "i": "[%s]" % ",".join(i) if i != "" else ""} for a in range(4) for at in sprod("NS", a) for p, _ in params.items() for tp, i in zip(spermut(at, _["arity"]), spermut("ijk"[:a], _["arity"])) if _["arg_types"] == tp and any(at in tp for tp in spermut("".join(_["value_types"] for _ in sets.values())))) =)
<cmp>                   ::= '<='|'=='|'>='
<constant>              ::= -<positive_constant>|<positive_constant>
<positive_constant>     ::=1|2
#<positive_constant>    ::=1|2|3|4|5|6|7|8|9
